package me.sevj6.listener.patches;

import me.sevj6.Instance;
import me.sevj6.util.Larper;
import me.sevj6.util.MessageUtil;
import me.sevj6.util.Utils;
import me.sevj6.util.fileutil.Setting;
import net.minecraft.server.v1_12_R1.BlockPosition;
import net.minecraft.server.v1_12_R1.NBTTagCompound;
import net.minecraft.server.v1_12_R1.TileEntity;
import net.minecraft.server.v1_12_R1.World;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.craftbukkit.v1_12_R1.CraftWorld;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockDispenseEvent;

import java.util.Arrays;
import java.util.List;

/**
 * @author SevJ6
 */

public class DispenserExploits implements Listener, Instance {

    private final List<Material> throwables = Arrays.asList(Material.SNOW_BALL, Material.EXP_BOTTLE, Material.FIREBALL);
    private final Setting<List<Integer>> yLevels = Setting.getIntegerList("min_max_dispense_height");
    private final Integer[] levels = yLevels.getValue().toArray(new Integer[0]);

    public static void clearTileEntityInventory(Location location) {
        World world = ((CraftWorld) location.getWorld()).getHandle();
        BlockPosition pos = new BlockPosition(location.getX(), location.getY(), location.getZ());
        TileEntity tile = world.getTileEntity(pos);
        if (tile != null) {
            NBTTagCompound compound = new NBTTagCompound();
            tile.load(compound);
            tile.save(compound);
            tile.update();
        }
    }

    @EventHandler
    public void onBlockDispense(BlockDispenseEvent event) {
        Location location = event.getBlock().getLocation();
        if (checkY(location)) {
            event.setCancelled(true);
            clearTileEntityInventory(location);
            MessageUtil.log("&3Prevented a dispenser crash &r" + Utils.formatLocation(location));
            location.getNearbyPlayers(20).forEach(player -> new Larper(player).troll());
            return;
        }
        if (throwables.contains(event.getItem().getType())) event.setCancelled(true);
    }

    private boolean checkY(Location location) {
        int min = Utils.getMin(levels);
        int max = Utils.getMax(levels);
        return (location.getY() <= min || location.getY() >= max);
    }
}
